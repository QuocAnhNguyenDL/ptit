module FSM(
		    input clk, 
			 input rst,
			 input wire start,
			 input wire done_money,
			 input wire continue_buy,
			 input wire cancel,
			 input wire [1:0] item_in, // 00, 01, 10
			 input wire deno_5, deno_10, deno_20,

			 output end_trans,
			 output wire [7:0] sum_money,
			 output [7:0] price,
			 output wire [1:0] item_select,
			 output done
			 ); 
			
    localparam FIVE = 3'b001,
               TEN = 3'b010,
               TWENTY = 3'b100,
               IDLE = 3'b000,
               SELECT = 3'b001,
               RECEIVE_MONEY = 3'b010,
               COMPARE = 3'b011,
               PROCESS = 3'b100,
               RETURN_CHANGE = 3'b101,
               MAX_MONEY = 8'd40;

	reg [2:0] current_state;
	reg [2:0] next_state;
	wire [2:0] num_stock [3:0];
	wire [7:0] price_item [3:0];
	reg [7:0] current_price;
	reg 		 out_stock;
	reg		 over_flag;
	reg		 enough_money;

	 reg end_trans_r;
	 reg [7:0] sum_money_r;
	 reg [7:0] sum_money_next;
	 reg [7:0] price_r;
	 reg [1:0] item_select_r;
	 reg done_r;
	 
//        out_stock = 0;
//		  sum_money_r = 0;
	assign        num_stock[0] = 3'd7;
	assign        num_stock[1] = 3'd7;
	assign        num_stock[2] = 3'd7;
	assign		  num_stock[3] = 3'd0;
	assign        price_item[0] = 5;
	assign        price_item[1] = 10;
	assign        price_item[2] = 15;
	assign		  price_item[3] = 20;


	
	always@(posedge clk or negedge rst) begin
		if(~rst) begin
			current_state <= IDLE;
			//sum_money_next <= 0;
		end else begin
			current_state <= next_state;
		end
	end
		
	always @(*) begin		
		end_trans_r = 0;
		done_r = 0;	
		sum_money_r = 0;
		//item_select_r = 0;
		case (current_state)		
			IDLE: begin
				current_price = 0;
				item_select_r = 0;
			   sum_money_r = 0;
				sum_money_next = 0;
				end_trans_r = 0;
				done_r = 0;
				if(start == 0) begin
					next_state = IDLE;
				end else begin
					next_state = SELECT;
				end
			end
			SELECT: begin
				end_trans_r = 0;
				sum_money_next = 0;
				done_r = 0;
				item_select_r = item_in;
				out_stock = (num_stock[item_in] == 0)?1:0;
				current_price = price_item[item_in];
				if (cancel) begin
//					end_trans_r = 1;
					next_state = IDLE;
				end else if (out_stock == 1) begin
					next_state = SELECT;
				end else begin
					next_state = RECEIVE_MONEY;
				end
			end
			RECEIVE_MONEY: begin
				case({deno_20, deno_10, deno_5}) 
					3'b001:	begin
						sum_money_r = 5;
						end
					3'b010:	begin
						sum_money_r = 10;
						end
					3'b100:	begin
						sum_money_r = 20;
						end
					default: begin
						sum_money_r = 0;
						end
					endcase
				sum_money_next = sum_money_next + sum_money_r;
				over_flag = (sum_money_next > MAX_MONEY)? 1:0;
				if (cancel) begin
					next_state = RETURN_CHANGE;
				end else if ((!done_money) && (!over_flag)) begin
					next_state = RECEIVE_MONEY;
				end else begin
					next_state = COMPARE;
				end
			end
			COMPARE: begin
				enough_money = (sum_money_next > current_price)?1:0;
				if (enough_money) begin
					next_state = RETURN_CHANGE;
				end else begin
					next_state = PROCESS;
				end
			end
			PROCESS: begin
				if (cancel) begin
					next_state = RETURN_CHANGE;
				end else begin
					next_state = RECEIVE_MONEY;
				end
			end
			RETURN_CHANGE: begin
				end_trans_r = 1;
				done_r = 1;
				//item_select_r = item_in;
				if (continue_buy) begin
					next_state = SELECT;
				end else begin
					next_state = IDLE;
				end
			end
			default: begin
				next_state = IDLE;
			end
		endcase
	end
	
	assign end_trans = end_trans_r;
	assign sum_money = sum_money_next;
	assign price = current_price;
	assign item_select = item_select_r;
	assign done = done_r;
	
endmodule